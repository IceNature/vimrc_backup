"""""""""""""""""""""""""""VIM Encoding"""""""""""""""""""""""""""
set encoding=utf-8
set langmenu=zh_CN.UTF-8
language messages zh_CN.utf-8
set fileencoding=utf-8
if has("gui_running")
    set guioptions-=m
    set guioptions-=T
    set showtabline=0
    set guioptions-=b
endif 
set winaltkeys=no	"Alt 组合键不映射到菜单上
"""""""DirectX
if has('win32') || has('win64')
    set renderoptions=type:directx,renmode:5
end
"""""""最大化开启
if has('win32')
    au GUIEnter * simalt ~x
else
    au GUIEnter * call MaximizeWindow()
endif
function! MaximizeWindow()
    silent !wmctrl -r :ACTIVE: -b add,maximized_vert,maximized_horz
endfunction
"""""""""""""""""""""""""""VIM Encoding"""""""""""""""""""""""""""

set nocompatible
source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

set diffexpr=MyDiff()
function MyDiff()
    let opt = '-a --binary '
    if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
    if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
    let arg1 = v:fname_in
    if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
    let arg2 = v:fname_new
    if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
    let arg3 = v:fname_out
    if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
    let eq = ''
    if $VIMRUNTIME =~ ' '
        if &sh =~ '\<cmd'
            let cmd = '""' . $VIMRUNTIME . '\diff"'
            let eq = '"'
        else
            let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
        endif
    else
        let cmd = $VIMRUNTIME . '\diff'
    endif
    silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction

"""""""""""""""""""""""""""Vundle"""""""""""""""""""""""""""
set nocompatible
filetype off
set rtp+=$VIM/vimfiles/bundle/Vundle/ 
let path='$VIM/vimfiles/bundle' 
call vundle#begin(path)

Plugin 'gmarik/Vundle'

Plugin 'majutsushi/tagbar'
"Plugin 'scrooloose/nerdtree'
Plugin 'SirVer/ultisnips'
Plugin 'Valloric/YouCompleteMe'
Plugin 'scrooloose/syntastic'
Plugin 'bling/vim-airline'
Plugin 'jiangmiao/auto-pairs'
Plugin 'Yggdroot/LeaderF'
Plugin 'Chiel92/vim-autoformat'
Plugin 'Yggdroot/indentLine'
Plugin 'idanarye/vim-dutyl'
Plugin 'scrooloose/nerdcommenter'
Plugin 'tpope/vim-fugitive'
Plugin 'lilydjwg/colorizer'
Plugin 'tpope/vim-surround'
Plugin 'dkprice/vim-easygrep'
Plugin 'honza/vim-snippets'
Plugin 'tomasr/molokai'
Plugin 'abudden/taghighlight-automirror'
Plugin 'altercation/vim-colors-solarized'
Plugin 'cSyntaxAfter'

call vundle#end()
filetype plugin indent on
"""""""""""""""""""""""""""Vundle"""""""""""""""""""""""""""
"""""""""""""""""""""""""""YCM"""""""""""""""""""""""""""

let g:ycm_global_ycm_extra_conf='E:/DeveloperTools/Vim/vimfiles/bundle/.ycm_extra_conf.py' "设置全局配置文件
let g:ycm_seed_identifiers_with_syntax=1 " 语法关键字补全
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_always_populate_location_list = 1   "自动弹出locationlist
let g:ycm_use_ultisnips_completer = 1
let g:ycm_key_invoke_completion = '<A-/>'
"""""""""""""""""""""""""""YCM"""""""""""""""""""""""""""
"""""""""""""""""""""""""""vim-autoformat"""""""""""""""""""""""""""
let g:formatprg_d = "astyle"
let g:formatprg_args_expr_d = '"--mode=java --style=ansi -pcH".(&expandtab ? "s".&shiftwidth : "t")'
"""""""""""""""""""""""""""vim-autoformat"""""""""""""""""""""""""""
"""""""""""""""""""""""""""NERDTree"""""""""""""""""""""""""""
"autocmd vimenter * NERDTree
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
"let NERDChristmasTree = 1
"""""""""""""""""""""""""""NERDTree"""""""""""""""""""""""""""
"""""""""""""""""""""""""""syntastic"""""""""""""""""""""""""""
let g:syntastic_always_populate_loc_list = 1  "自动更新错误列表
"let g:syntastic_cpp_compiler = 'clang++'  
let g:syntastic_cpp_compiler_options = ' -std=c++11 -Wall'  " C++11支持
let g:syntastic_python_python_exec = 'E:/DeveloperTools/Python34' 
"""""""""""""""""""""""""""syntastic"""""""""""""""""""""""""""
"""""""""""""""""""""""""""VIM"""""""""""""""""""""""""""
set number "显示行号
syntax on "语法高亮度显示
filetype on  "检测文件的类型
set autoindent "vim使用自动对齐，也就是把当前行的对齐格式应用到下一行(自动缩进）
set cindent "（cindent是特别针对 C语言语法自动缩进）
set tabstop=4
set softtabstop=4  "缩进相关
set shiftwidth=4
set expandtab "展开Tab
set smartindent "依据上面的对齐格式，智能的选择对齐方式，对于类似C语言编写上有用
set showmatch "设置匹配模式，类似当输入一个左括号时会匹配相应的右括号
set incsearch "搜索时自动高亮第一个匹配项
set hlsearch "高亮搜索匹配项
set ignorecase smartcase "智能匹配大小写
set hidden "隐藏未保存缓冲区
let mapleader=',' "leader映射为逗号
set wildmode=full
set wildmenu  "命令行补全菜单
"set autochdir  "自动切换工作目录
"set background=light 
"let g:solarized_termcolors=256
"colorscheme solarized   "设置配色方案
colorscheme molokai
set fileencoding=utf-8
nnoremap <silent> <leader>scf :cd %:h<TAB><CR>
nnoremap <silent> <leader>ev :e $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>
nnoremap <silent> <leader>sa :wall<CR>
nnoremap <leader>afa :bufdo Autoformat<CR>
nnoremap <leader>af :Autoformat<CR>
nnoremap <leader>lf :Leaderf<CR>
nnoremap <silent> <leader>bn :bn<CR>
nnoremap <silent> <leader>bp :bp<CR>
nnoremap <silent> <leader>wj <C-w>j
nnoremap <silent> <leader>wk <C-w>k
nnoremap <silent> <leader>wl <C-w>l
nnoremap <silent> <leader>wh <C-w>h
nnoremap <leader>utf :UpdateTypesFile<CR>
nnoremap <silent>utfl :UpdateTypesFileOnly<CR>
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'
nnoremap <silent> <leader>nl :nohl<CR>
nnoremap <silent> <leader>sb :set bomb<CR>
nnoremap <silent> <leader>et :%retab!<CR>
nnoremap <silent> <leader>qo :copen<CR>
nnoremap <silent> <leader>qc :cclose<CR>
nnoremap <leader>qn :cnext<CR>
nnoremap <leader>qp :cprev<CR>
nnoremap <silent> <leader>lo :lopen<CR>
nnoremap <silent> <leader>lc :lclose<CR>
nnoremap <leader>ln :lnext<CR>
nnoremap <leader>lp :lprev<CR>
set guifont=DejaVu\ Sans\ Mono\ for\ Powerline:h12
set guifontwide=Microsoft_YaHei:h12
"""""""运行Python
augroup runpython
    autocmd!
    autocmd FileType python set makeprg=python\ -c\ \"import\ py_compile,sys;\ sys.stderr=sys.stdout;\ py_compile.compile(r'%')\" 
    autocmd FileType python set efm=%C\ %.%#,%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\ ]%\\@=%m 
    autocmd FileType python nmap <localleader>rp :!python %<CR> 
    autocmd FileType python set tabstop=4 
    autocmd FileType python set nowrap 
    autocmd FileType python set go+=b
augroup END
"""""""""""""""""""""""""""VIM"""""""""""""""""""""""""""
"""""""""""""""""""""""""""ctags"""""""""""""""""""""""""""
set tags=tagfile
autocmd vimenter * TagbarToggle
let g:tagbar_left = 1
let g:tagbar_type_d = {'ctagstype' : 'd',  'kinds' : [  'c:classes:0:1',  'f:functions',  'g:enums',  'u:unions',  's:structs',  'm:members'  ], 'sro': '.',  'kind2scope' : {  'c' : 'class',  'g' : 'enum',  's' : 'struct',  'u' : 'union' },  'scope2kind' : {  'enum' : 'g',  'class' : 'c',  'struct' : 's',  'union' : 'u'  }  }
"""""""""""""""""""""""""""ctags"""""""""""""""""""""""""""
"""""""""""""""""""""""""""DCD"""""""""""""""""""""""""""
call dutyl#register#tool('dcd-client','E:/DeveloperTools/DCD/dcd-client.exe') 
call dutyl#register#tool('dcd-server','E:/DeveloperTools/DCD/dcd-server.exe')
let g:dutyl_stdImportPaths=['E:/DeveloperTools/dmd2/src/phobos', 'E:/DeveloperTools/dmd2/src/druntime/import', 'E:/DeveloperTools/dmd2/src/tango']
let g:dutyl_neverAddClosingParen = 1
"""""""""""""""""""""""""""DCD"""""""""""""""""""""""""""
"""""""""""""""""""""""""""airline"""""""""""""""""""""""""""
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions#tagbar#enabled = 1
let g:airline#extensions#tagbar#flags = 'f'
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#branch#empty_message = ''
let g:airline#extensions#branch#displayed_head_limit = 10
let g:airline_powerline_fonts = 1
"""""""""""""""""""""""""""airline"""""""""""""""""""""""""""
"""""""""""""""""""""""""""ultisnips"""""""""""""""""""""""""""
let g:UltiSnipsJumpForwardTrigger="<c-b>" 
let g:UltiSnipsExpandTrigger="<c-e>"
let g:UltiSnipsUsePythonVersion = 2 "US强制使用Python 2.X以兼容YCM
"""""""""""""""""""""""""""ultisnips"""""""""""""""""""""""""""
"""""""""""""""""""""""""""TagHighlight"""""""""""""""""""""""""""
if ! exists('g:TagHighlightSettings')
    let g:TagHighlightSettings = {}
endif
let g:TagHighlightSettings['TagFileName'] = 'tagfile'
let g:TagHighlightSettings['CtagsExecutable'] = 'ctags.exe'
let g:TagHighlightSettings['LanguageDetectionMethods'] = ['Extension', 'FileType']
let g:TagHighlightSettings['FileTypeLanguageOverrides'] = {'tagbar': 'c'}
"""""""""""""""""""""""""""TagHighlight"""""""""""""""""""""""""""
"""""""""""""""""""""""""""cSyntaxAfter"""""""""""""""""""""""""""
if exists("*CSyntaxAfter")
    call CSyntaxAfter()
endif
"""""""""""""""""""""""""""cSyntaxAfter"""""""""""""""""""""""""""
"""""""""""""""""""""""""""visual-star-search"""""""""""""""""""""""""""
"""Code from:https://github.com/nelstrom/vim-visual-star-search/blob/master/plugin/visual-star-search.vim
function! s:VSetSearch(cmdtype)
    let temp = @s
    norm! gv"sy
    let @/ = '\V' . substitute(escape(@s, a:cmdtype.'\'), '\n', '\\n', 'g')
    let @s = temp
endfunction
xnoremap * :<C-u>call <SID>VSetSearch('/')<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch('?')<CR>?<C-R>=@/<CR><CR>
"""""""""""""""""""""""""""visual-star-search"""""""""""""""""""""""""""
