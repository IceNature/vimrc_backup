let $PATH.=";".$VIM."/ExtraTools"
"""""""""""""""""""""""""""VIM Encoding"""""""""""""""""""""""""""
set encoding=utf-8
set langmenu=en_US.UTF-8
language messages en_US.utf-8
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
if has("gui_running")
    set guioptions-=m
    set guioptions-=T
    set showtabline=0
    set guioptions-=b
endif 
set winaltkeys=no	"Alt does not map to menu
"""""""DirectX
if has('win32') || has('win64')
    set renderoptions=type:directx,renmode:5,taamode:1
end
"""""""Maximize windows startup
if has('win32')
    au GUIEnter * simalt ~x
else
    au GUIEnter * call MaximizeWindow()
endif
function! MaximizeWindow()
    silent !wmctrl -r :ACTIVE: -b add,maximized_vert,maximized_horz
endfunction
"""""""""""""""""""""""""""VIM Encoding"""""""""""""""""""""""""""

set nocompatible
source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

set diffexpr=MyDiff()
function! MyDiff()
    let opt = '-a --binary '
    if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
    if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
    let arg1 = v:fname_in
    if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
    let arg2 = v:fname_new
    if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
    let arg3 = v:fname_out
    if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
    let eq = ''
    if $VIMRUNTIME =~ ' '
        if &sh =~ '\<cmd'
            let cmd = '""' . $VIMRUNTIME . '\diff"'
            let eq = '"'
        else
            let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
        endif
    else
        let cmd = $VIMRUNTIME . '\diff'
    endif
    silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction
"""""""""""""""""""""""""""vim-plug"""""""""""""""""""""""""""
call plug#begin(expand($VIM).'/vimfiles/bundle')

"""""""""""Common
Plug 'Valloric/YouCompleteMe'
Plug 'SirVer/ultisnips'
Plug 'vim-airline/vim-airline-themes'
Plug 'bling/vim-airline'
Plug 'Raimondi/delimitMate'
Plug 'DataWraith/auto_mkdir'
Plug 'Yggdroot/LeaderF', {'do': './install.bat'}
"Plug 'Chiel92/vim-autoformat'
Plug 'Yggdroot/indentLine'
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-fugitive'
Plug 'luochen1990/rainbow'
Plug 'lilydjwg/colorizer'
Plug 'tpope/vim-surround'
Plug 'honza/vim-snippets'
Plug 'tomasr/molokai'
Plug 'altercation/vim-colors-solarized'
Plug 'Shougo/vimproc.vim'
"Plug 'chriskempson/base16-vim'
"Plug 'chriskempson/base16-shell'
"Plug 'richq/cmakecompletion-vim'
Plug 'mhinz/vim-startify' 
Plug 'skywind3000/asyncrun.vim'
Plug 'w0rp/ale'
Plug 'danro/rename.vim'

"""""""Markdown
Plug 'iamcco/markdown-preview.vim', {'for': 'markdown'}

"""""""""""Desktop
"""""""C/C++
"Plug 'twatan/vim-cmake-dict'
"au FileType cmake set dictionary+=$VIM/vimfiles/bundle/vim-cmake-dict/dict/cmake.dict
Plug 'richq/vim-cmake-completion', {'for': 'cmake'}
Plug 'taxilian/a.vim', {'for': ['c', 'cpp']}
Plug 'octol/vim-cpp-enhanced-highlight', {'for': ['c', 'cpp']}
"""""""D
Plug 'idanarye/vim-dutyl', {'branch': 'develop', 'for': 'd'}
Plug 'JesseKPhillips/d.vim', {'for': 'd'}
"""""""Python
Plug 'jmcantrell/vim-virtualenv', {'for': 'python'}
Plug 'python-mode/python-mode', {'for': 'python'}

"""""""""""Web
"""""""html/js
Plug 'othree/html5.vim', {'for': ['html', 'php']}
Plug 'hail2u/vim-css3-syntax', {'for': ['css', 'html']}
Plug 'pangloss/vim-javascript', {'for': ['js', 'ts', 'html']}
"""""""PHP
Plug 'shawncplus/phpcomplete.vim', {'for': 'php'}
"Plug '2072/PHP-Indenting-for-VIm'
"Plug 'captbaritone/better-indent-support-for-php-with-html'

"""""""""""HDL
"""""""Verilog
Plug 'vhda/verilog_systemverilog.vim', {'for': 'verilog_systemverilog'}

call plug#end()
filetype plugin indent on
"""""""""""""""""""""""""""vim-plug"""""""""""""""""""""""""""
"""""""""""""""""""""""""""VIM"""""""""""""""""""""""""""
set number "显示行号
syntax on "语法高亮度显示
filetype on  "检测文件的类型
set autoindent "vim使用自动对齐，也就是把当前行的对齐格式应用到下一行(自动缩进）
set cindent "（cindent是特别针对 C语言语法自动缩进）
set tabstop=4
set softtabstop=4  "缩进相关
set shiftwidth=4
set expandtab "展开Tab
set smartindent "依据上面的对齐格式，智能的选择对齐方式，对于类似C语言编写上有用
set showmatch "设置匹配模式，类似当输入一个左括号时会匹配相应的右括号
set incsearch "搜索时自动高亮第一个匹配项
set hlsearch "高亮搜索匹配项
set ignorecase smartcase "智能匹配大小写
set hidden "隐藏未保存缓冲区
let mapleader=',' "leader映射为逗号
set wildmode=full
set wildmenu  "命令行补全菜单
set fileformats=unix,dos "优先选择Unix换行符
set colorcolumn=80
set cursorline  "显示当前行位置
set cursorcolumn   "显示当前列位置
set nobackup
set noundofile
set directory=$TEMP
set noerrorbells
set novisualbell
"set autochdir  "自动切换工作目录
set conceallevel=0

"show indent for Tab
set list lcs=tab:\|\ 

"set background=dark
"let g:solarized_termcolors=256
"colorscheme solarized
colorscheme molokai
set termguicolors
set t_Co=256

" change work directory to current file's dir
nnoremap <silent> <leader>cdf :cd %:h<TAB><CR>
" edit vimrc
nnoremap <silent> <leader>ev :e $MYVIMRC<cr>
" source vimrc
nnoremap <leader>sv :source $MYVIMRC<cr>
" auto format
"nnoremap <silent> <leader>af :update<CR>:Autoformat<CR>:update<CR>
nnoremap <silent> <leader>af :call FormatCode()<CR>
" Delete all space lines
nnoremap <silent> <leader>dsl :global /^\n*$/ d
nnoremap <silent> <leader>bn :bn<CR>
nnoremap <silent> <leader>bp :bp<CR>
nnoremap <silent> <leader>wj <C-w>j
nnoremap <silent> <leader>wk <C-w>k
nnoremap <silent> <leader>wl <C-w>l
nnoremap <silent> <leader>wh <C-w>h
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'
" 不再高亮搜索结果
nnoremap <silent> <leader>nl :nohl<CR>
nnoremap <silent> <leader>qc :cclose<CR>
nnoremap <leader>qn :cnext<CR>
nnoremap <leader>qp :cprev<CR>
nnoremap <silent> <leader>lc :lclose<CR>
nnoremap <leader>ln :lnext<CR>
nnoremap <leader>lp :lprev<CR>
"nnoremap <silent> <leader>rp :silent !python %<CR>
inoremap <silent> <A-;> <C-c>A;
inoremap <silent> <A-.> <C-c>A
nnoremap <leader>t :LeaderfBufTag<CR>
" search word under cursor, the pattern is treated as regex, and enter normal mode directly
nnoremap gw :<C-U><C-R>=printf("Leaderf! rg -e %s ", expand("<cword>"))<CR><CR>
" search visually selected text literally, don't quit LeaderF after accepting an entry
xnoremap gf :<C-U><C-R>=printf("Leaderf! rg -F -e %s ", leaderf#Rg#visual())<CR><CR>
" recall last search. If the result window is closed, reopen it.
noremap go :<C-U>Leaderf! rg --recall<CR>

set guifont=Source\ Code\ Pro\ for\ Powerline:h13

"""""""autocmd
augroup dubjson
    autocmd!
    autocmd BufEnter dub.json setlocal noexpandtab
    autocmd BufLeave dub.json setlocal expandtab
augroup END

"""""""Go lang insert map
augroup golangfen
    autocmd!
    autocmd FileType go inoremap <buffer>; :
    autocmd FileType go inoremap <buffer>: ;
augroup END
"""""""""""""""""""""""""""VIM"""""""""""""""""""""""""""
"""""""""""""""""""""""""""vim-autoformat"""""""""""""""""""""""""""
"let g:formatdef_my_custom_d = '"astyle --mode=c -z2 --style=ansi -pcH".(&expandtab ? "s".&shiftwidth : "t")'
"let g:formatters_d = ['my_custom_d']
"let g:formatdef_my_custom_c = '"astyle --mode=c -z2 --style=ansi -pcH".(&expandtab ? "s".&shiftwidth : "t")'
"let g:formatters_c=['my_custom_c']
"let g:formatters_cpp = ['my_custom_cpp']
"let g:formatdef_my_custom_cpp = '"astyle --mode=c -z2 --style=ansi -pcH".(&expandtab ? "s".&shiftwidth : "t")'
"""""""""""""""""""""""""""vim-autoformat"""""""""""""""""""""""""""
"""""""""""""""""""""""""""ctags"""""""""""""""""""""""""""
nnoremap <silent> <leader>gtf :!ctags -R --exclude=.git --fields=+li --extra=+q<CR>
set tags=tags
"""""""""""""""""""""""""""ctags"""""""""""""""""""""""""""
"""""""""""""""""""""""""""DCD"""""""""""""""""""""""""""
let g:dutyl_stdImportPaths=['E:/DeveloperTools/Dlang/dmd2/src/phobos', 'E:/DeveloperTools/Dlang/dmd2/src/druntime/import', 'E:/DeveloperTools/Dlang/dmd2/src/tango']
let g:dutyl_neverAddClosingParen = 1
"""""""""""""""""""""""""""DCD"""""""""""""""""""""""""""
"""""""""""""""""""""""""""airline"""""""""""""""""""""""""""
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#branch#empty_message = ''
let g:airline#extensions#branch#displayed_head_limit = 10
let g:airline_powerline_fonts = 1
let g:airline#extensions#virtualenv#enabled = 1
let g:airline#extensions#ale#enabled = 1
"""""""""""""""""""""""""""airline"""""""""""""""""""""""""""
"""""""""""""""""""""""""""ale"""""""""""""""""""""""""""
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 0
let g:ale_open_list = 1
"let g:ale_c_parse_compile_commands = 1
"let g:ale_c_gcc_autoinclude_source_dir = 1

let g:ale_linters = {
\   'c': [],
\   'cpp': [],
\   'python': ['pylint'],
\   'verilog': ['iverilog']
\}
let g:ale_cpp_clangcheck_options = '-Wall -std=c++14 -x c++'
let g:ale_cpp_clang_options = '-Wall -std=c++14 -x c++'

let g:ale_c_clangformat_options = '-style=WebKit'
let g:ale_python_pylint_options = '--disable=missing-docstring,trailing-newlines,fixme'
let g:ale_fixers = {
\   'c': ['clang-format'],
\   'cpp': ['clang-format'],
\   'python': ['autopep8']
\}
let g:ale_fix_on_save = 0
function! FormatCode()
    let l:current_type = &filetype
    execute('update')

    let l:format_command = 'normal! gg=G'
    if has_key(g:ale_fixers, l:current_type)
        let l:format_command = 'ALEFix'
    endif
    execute(l:format_command)

    execute('update')
endfunction
"""""""""""""""""""""""""""ale"""""""""""""""""""""""""""
"""""""""""""""""""""""""""ultisnips"""""""""""""""""""""""""""
"let g:UltiSnipsJumpForwardTrigger="<C-N>" 
"let g:UltiSnipsJumpBackwardTrigger="<C-P>"
"let g:UltiSnipsExpandTrigger="<C-E>"
function! g:UltiSnips_Complete()
    call UltiSnips#ExpandSnippet()
    if g:ulti_expand_res == 0
        if pumvisible()
            return "\<C-n>"
        else
            call UltiSnips#JumpForwards()
            if g:ulti_jump_forwards_res == 0
                return "\<TAB>"
            endif
        endif
    endif
    return ""
endfunction

function! g:UltiSnips_Reverse()
    call UltiSnips#JumpBackwards()
    if g:ulti_jump_backwards_res == 0
        return "\<C-P>"
    endif
    return ""
endfunction

if !exists("g:UltiSnipsJumpForwardTrigger")
    let g:UltiSnipsJumpForwardTrigger = "<tab>"
endif

if !exists("g:UltiSnipsJumpBackwardTrigger")
    let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
endif
au InsertEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
au InsertEnter * exec "inoremap <silent> " . g:UltiSnipsJumpBackwardTrigger . " <C-R>=g:UltiSnips_Reverse()<cr>"
let g:UltiSnipsUsePythonVersion = 3 
let g:UltiSnipsRemoveSelectModeMappings = 0
if exists('$VIM/userinfo.vim')    "插入 snippets 所需的个人信息
    source $VIM/userinfo.vim
endif
"""""""""""""""""""""""""""ultisnips"""""""""""""""""""""""""""
"""""""""""""""""""""""""""visual-star-search"""""""""""""""""""""""""""
"""Code from:https://github.com/nelstrom/vim-visual-star-search/blob/master/plugin/visual-star-search.vim
function! s:VSetSearch(cmdtype)
    let temp = @s
    norm! gv"sy
    let @/ = '\V' . substitute(escape(@s, a:cmdtype.'\'), '\n', '\\n', 'g')
    let @s = temp
endfunction
xnoremap * :<C-u>call <SID>VSetSearch('/')<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch('?')<CR>?<C-R>=@/<CR><CR>
"""""""""""""""""""""""""""visual-star-search"""""""""""""""""""""""""""
"""""""""""""""""""""""""""rainbow"""""""""""""""""""""""""""
let g:rainbow_active = 1
"""""""""""""""""""""""""""rainbow"""""""""""""""""""""""""""
"""""""""""""""""""""""""""vim-javascript"""""""""""""""""""""""""""
let g:javascript_enable_domhtmlcss = 1
"""""""""""""""""""""""""""vim-javascript"""""""""""""""""""""""""""
"""""""""""""""""""""""""""HTML"""""""""""""""""""""""""""
let g:html_indent_inctags = "body,head,tbody"	" 缩进body head
let g:html_indent_script1 = "inc"	" 缩进<script>标签
let g:html_indent_style1 = "inc"	" 缩进<style>标签
runtime macros/matchit.vim   "支持使用 % 在 XML 标签间跳转
"""""""""""""""""""""""""""HTML"""""""""""""""""""""""""""
"""""""""""""""""""""""""""LeaderF"""""""""""""""""""""""""""
let g:Lf_StlSeparator = { 'left': "\ue0b0", 'right': "\ue0b2" }
"let g:indentLine_conceallevel = 2
"let g:indentLine_enabled = 0
"""""""""""""""""""""""""""LeaderF"""""""""""""""""""""""""""
"""""""""""""""""""""""""""virtualenv"""""""""""""""""""""""""""
let g:virtualenv_directory = 'D:/Workspace/virtualenvs'
"""""""""""""""""""""""""""virtualenv"""""""""""""""""""""""""""
"""""""""""""""""""""""""""YouCompleteMe"""""""""""""""""""""""""""
let g:ycm_global_ycm_extra_conf = 'E:/DeveloperTools/vim/.ycm_extra_conf.py'
let g:ycm_key_invoke_completion = '<A-/>'
" Use first python found in PATH
let g:ycm_python_binary_path = 'python'
let g:ycm_min_num_of_chars_for_completion = 1
let g:ycm_complete_in_comments = 1
let g:ycm_complete_in_strings = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_always_populate_location_list = 1
let g:ycm_confirm_extra_conf = 0
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_show_diagnostics_ui = 1
let g:ycm_semantic_triggers = {
    \ 'python' : ['from ', 're!import[\w,\s]+'],
    \ 'd' : ['import[\w,\s]+'],
    \ 'php' : ['$'],
    \ 'c' : ['re!\w*'],
    \ 'verilog_systemverilog': ['.']
    \ }
let g:ycm_filetype_blacklist = {
      \ 'qf' : 1,
      \ 'notes' : 1,
      \ 'unite' : 1,
      \ 'vimwiki' : 1,
      \ 'pandoc' : 1,
      \ 'infolog' : 1,
      \ 'mail' : 1
      \}

nnoremap <silent> <leader>gd :YcmCompleter GoToDefinition<CR>
nnoremap <silent> <leader>gt :YcmCompleter GoTo<CR>
nnoremap <silent> <leader>gc :YcmCompleter GoToDeclaration<CR>
"""""""""""""""""""""""""""YouCompleteMe"""""""""""""""""""""""""""
"""""""""""""""""""""""""""markdown"""""""""""""""""""""""""""
let g:mkdp_path_to_chrome = 'C:/Program Files/Mozilla Firefox/firefox.exe'
"""""""""""""""""""""""""""markdown"""""""""""""""""""""""""""
"""""""""""""""""""""""""""delimitMate"""""""""""""""""""""""""""
let delimitMate_balance_matchpairs = 1
let delimitMate_expand_space = 1
let delimitMate_expand_cr = 1
"""""""""""""""""""""""""""delimitMate"""""""""""""""""""""""""""
"""""""""""""""""""""""""""Python-mode"""""""""""""""""""""""""""
let g:pymode_python = 'python3'
let g:pymode_virtualenv = 0
let g:pymode_warnings = 0
let g:pymode_run = 1
let g:pymode_indent = 1
let g:pymode_doc = 1
let g:pymode_doc_bind = 'K'
let g:pymode_lint = 0
let g:pymode_lint_on_write = 0
let g:pymode_breakpoint = 0
let g:pymode_rope = 0
let g:pymode_rope_completion = 0
let g:pymode_rope_regenerate_on_write = 0
"""""""""""""""""""""""""""Python-mode"""""""""""""""""""""""""""
"""""""""""""""""""""""""""AsyncRun"""""""""""""""""""""""""""
command! -bang -nargs=* -complete=file Make AsyncRun -program=make @ <args>
let g:airline_section_error = airline#section#create_right(['%{g:asyncrun_status}'])
"""""""""""""""""""""""""""AsyncRun"""""""""""""""""""""""""""
"""""""""""""""""""""""""""Cpp-highlight"""""""""""""""""""""""""""
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_experimental_template_highlight = 1
let g:cpp_concepts_highlight = 1
let c_no_curly_error=1
"""""""""""""""""""""""""""Cpp-highlight"""""""""""""""""""""""""""
