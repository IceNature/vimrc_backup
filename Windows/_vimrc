let $PATH.=";".$VIM."/ExtraTools"
"""""""""""""""""""""""""""VIM Encoding"""""""""""""""""""""""""""
set encoding=utf-8
set langmenu=zh_CN.UTF-8
language messages zh_CN.utf-8
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
if has("gui_running")
    set guioptions-=m
    set guioptions-=T
    set showtabline=0
    set guioptions-=b
endif 
set winaltkeys=no	"Alt 组合键不映射到菜单上
"""""""DirectX
if has('win32') || has('win64')
    set renderoptions=type:directx,renmode:5
end
"""""""最大化开启
if has('win32')
    au GUIEnter * simalt ~x
else
    au GUIEnter * call MaximizeWindow()
endif
function! MaximizeWindow()
    silent !wmctrl -r :ACTIVE: -b add,maximized_vert,maximized_horz
endfunction
"""""""""""""""""""""""""""VIM Encoding"""""""""""""""""""""""""""

set nocompatible
source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

set diffexpr=MyDiff()
function! MyDiff()
    let opt = '-a --binary '
    if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
    if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
    let arg1 = v:fname_in
    if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
    let arg2 = v:fname_new
    if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
    let arg3 = v:fname_out
    if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
    let eq = ''
    if $VIMRUNTIME =~ ' '
        if &sh =~ '\<cmd'
            let cmd = '""' . $VIMRUNTIME . '\diff"'
            let eq = '"'
        else
            let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
        endif
    else
        let cmd = $VIMRUNTIME . '\diff'
    endif
    silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction
"""""""""""""""""""""""""""vim-plug"""""""""""""""""""""""""""
call plug#begin(expand($VIM).'/vimfiles/bundle')

"""""""""""Common
Plug 'Valloric/YouCompleteMe'
Plug 'SirVer/ultisnips'
Plug 'majutsushi/tagbar'
Plug 'scrooloose/syntastic'
Plug 'bling/vim-airline'
Plug 'Raimondi/delimitMate'
Plug 'DataWraith/auto_mkdir'
Plug 'Yggdroot/LeaderF'
Plug 'Chiel92/vim-autoformat'
Plug 'Yggdroot/indentLine'
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-fugitive'
Plug 'luochen1990/rainbow'
Plug 'lilydjwg/colorizer'
Plug 'tpope/vim-surround'
Plug 'dkprice/vim-easygrep'
Plug 'honza/vim-snippets'
Plug 'tomasr/molokai'
Plug 'altercation/vim-colors-solarized'
Plug 'Shougo/vimproc.vim'
"Plug 'chriskempson/base16-vim'
"Plug 'chriskempson/base16-shell'
"Plug 'richq/cmakecompletion-vim'
Plug 'elzr/vim-json'
let g:vim_json_syntax_conceal = 0
Plug 'mhinz/vim-startify'

"""""""Markdown
Plug 'iamcco/markdown-preview.vim'

"""""""""""Desktop
"""""""C/C++
"Plug 'twatan/vim-cmake-dict'
"au FileType cmake set dictionary+=$VIM/vimfiles/bundle/vim-cmake-dict/dict/cmake.dict
"Plug 'richq/vim-cmake-completion'
Plug 'taxilian/a.vim'
"""""""D
Plug 'idanarye/vim-dutyl', {'branch': 'develop'}
Plug 'JesseKPhillips/d.vim'

"""""""""""Web
"""""""html/js
Plug 'othree/html5.vim'
Plug 'hail2u/vim-css3-syntax'
Plug 'pangloss/vim-javascript'
"""""""PHP
Plug 'shawncplus/phpcomplete.vim'
"Plug '2072/PHP-Indenting-for-VIm'
"Plug 'captbaritone/better-indent-support-for-php-with-html'

call plug#end()
filetype plugin indent on
"""""""""""""""""""""""""""vim-plug"""""""""""""""""""""""""""
"""""""""""""""""""""""""""VIM"""""""""""""""""""""""""""
set number "显示行号
syntax on "语法高亮度显示
filetype on  "检测文件的类型
set autoindent "vim使用自动对齐，也就是把当前行的对齐格式应用到下一行(自动缩进）
set cindent "（cindent是特别针对 C语言语法自动缩进）
set tabstop=4
set softtabstop=4  "缩进相关
set shiftwidth=4
set expandtab "展开Tab
set smartindent "依据上面的对齐格式，智能的选择对齐方式，对于类似C语言编写上有用
set showmatch "设置匹配模式，类似当输入一个左括号时会匹配相应的右括号
set incsearch "搜索时自动高亮第一个匹配项
set hlsearch "高亮搜索匹配项
set ignorecase smartcase "智能匹配大小写
set hidden "隐藏未保存缓冲区
let mapleader=',' "leader映射为逗号
noremap \ ,    "映射逗号为\
set wildmode=full
set wildmenu  "命令行补全菜单
set fileformats=unix,dos "优先选择Unix换行符
set colorcolumn=80
set cursorline  "显示当前行位置
set cursorcolumn   "显示当前列位置
set nobackup
set noundofile
set noerrorbells
set novisualbell

"set background=dark
"let g:solarized_termcolors=256
"colorscheme solarized   "设置配色方案
colorscheme molokai
"set autochdir  "自动切换工作目录
nnoremap <silent> <leader>scf :cd %:h<TAB><CR>
nnoremap <silent> <leader>ev :e $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>
nnoremap <silent> <leader>af :update<CR>:Autoformat<CR>:update<CR>
nnoremap <silent> <leader>dsl :global /^\n*$/ d
nnoremap <silent> <leader>bn :bn<CR>
nnoremap <silent> <leader>bp :bp<CR>
nnoremap <silent> <leader>wj <C-w>j
nnoremap <silent> <leader>wk <C-w>k
nnoremap <silent> <leader>wl <C-w>l
nnoremap <silent> <leader>wh <C-w>h
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'
nnoremap <silent> <leader>nl :nohl<CR>
nnoremap <silent> <leader>qc :cclose<CR>
nnoremap <leader>qn :cnext<CR>
nnoremap <leader>qp :cprev<CR>
nnoremap <silent> <leader>lc :lclose<CR>
nnoremap <leader>ln :lnext<CR>
nnoremap <leader>lp :lprev<CR>
nnoremap <leader>t :LeaderfBufTag<CR>
nnoremap <silent> <leader>rp :!E:/DeveloperTools/Python35/python.exe %<CR>
set guifont=DejaVu\ Sans\ Mono\ for\ Powerline:h13
"set guifont=Source\ Code\ Pro\ for\ Powerline:h12
set guifontwide=Microsoft_YaHei:h13
"""""""Markdown
augroup markdownACMD
    autocmd!
    autocmd FileType markdown setlocal spell
augroup END
augroup dubjson
    autocmd!
    autocmd BufEnter dub.json set noexpandtab
    autocmd BufLeave dub.json set expandtab
augroup END

"""""""""""""""""""""""""""VIM"""""""""""""""""""""""""""
"""""""""""""""""""""""""""vim-autoformat"""""""""""""""""""""""""""
let g:formatdef_my_custom_d = '"astyle --mode=c -z2 --style=ansi -pcH".(&expandtab ? "s".&shiftwidth : "t")'
let g:formatters_d = ['my_custom_d']
let g:formatdef_my_custom_c = '"astyle --mode=c -z2 --style=ansi -pcH".(&expandtab ? "s".&shiftwidth : "t")'
let g:formatters_c=['my_custom_c']
let g:formatters_cpp = ['my_custom_cpp']
let g:formatdef_my_custom_cpp = '"astyle --mode=c -z2 --style=ansi -pcH".(&expandtab ? "s".&shiftwidth : "t")'
"""""""""""""""""""""""""""vim-autoformat"""""""""""""""""""""""""""
"""""""""""""""""""""""""""syntastic"""""""""""""""""""""""""""
let g:syntastic_always_populate_loc_list = 1  "自动更新错误列表
let g:syntastic_auto_loc_list = 1
let g:syntastic_cpp_compiler_options = ' -std=c++11 -Wall'  " C++11支持
let g:syntastic_python_python_exec = 'E:/DeveloperTools/Python35' 
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_d_compiler = 'E:/DeveloperTools/Dlang/dmd2/windows/bin/dmd'
let g:syntastic_d_dub_exec = 'E:/DeveloperTools/Dlang/dub/dub'
"""""""""""""""""""""""""""syntastic"""""""""""""""""""""""""""
"""""""""""""""""""""""""""ctags"""""""""""""""""""""""""""
nnoremap <silent> <leader>gtf :!ctags -R --exclude=.git<CR>
set tags=tags
autocmd vimenter * TagbarToggle
let g:tagbar_left = 1
let g:tagbar_width = 30
let g:tagbar_type_d = {'ctagstype' : 'd',  'kinds' : [  'c:classes:0:1',  'f:functions',  'g:enums',  'u:unions',  's:structs',  'm:members'  ], 'sro': '.',  'kind2scope' : {  'c' : 'class',  'g' : 'enum',  's' : 'struct',  'u' : 'union' },  'scope2kind' : {  'enum' : 'g',  'class' : 'c',  'struct' : 's',  'union' : 'u'  }  }
"""""""""""""""""""""""""""ctags"""""""""""""""""""""""""""
"""""""""""""""""""""""""""DCD"""""""""""""""""""""""""""
"call dutyl#register#tool('dcd-client','E:/DeveloperTools/DCD/dcd-client.exe') 
"call dutyl#register#tool('dcd-server','E:/DeveloperTools/DCD/dcd-server.exe')
let g:dutyl_stdImportPaths=['E:/DeveloperTools/Dlang/dmd2/src/phobos', 'E:/DeveloperTools/Dlang/dmd2/src/druntime/import', 'E:/DeveloperTools/Dlang/dmd2/src/tango']
let g:dutyl_neverAddClosingParen = 1
"""""""""""""""""""""""""""DCD"""""""""""""""""""""""""""
"""""""""""""""""""""""""""airline"""""""""""""""""""""""""""
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions#tagbar#enabled = 1
let g:airline#extensions#tagbar#flags = 'f'
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#branch#empty_message = ''
let g:airline#extensions#branch#displayed_head_limit = 10
let g:airline_powerline_fonts = 1
"""""""""""""""""""""""""""airline"""""""""""""""""""""""""""
"""""""""""""""""""""""""""ultisnips"""""""""""""""""""""""""""
let g:UltiSnipsJumpForwardTrigger="<C-N>" 
let g:UltiSnipsJumpBackwardTrigger="<C-P>"
let g:UltiSnipsExpandTrigger="<C-E>"
let g:UltiSnipsUsePythonVersion = 3 
if exists('$VIM/userinfo.vim')    "插入 snippets 所需的个人信息
    source $VIM/userinfo.vim
endif
"""""""""""""""""""""""""""ultisnips"""""""""""""""""""""""""""
"""""""""""""""""""""""""""visual-star-search"""""""""""""""""""""""""""
"""Code from:https://github.com/nelstrom/vim-visual-star-search/blob/master/plugin/visual-star-search.vim
function! s:VSetSearch(cmdtype)
    let temp = @s
    norm! gv"sy
    let @/ = '\V' . substitute(escape(@s, a:cmdtype.'\'), '\n', '\\n', 'g')
    let @s = temp
endfunction
xnoremap * :<C-u>call <SID>VSetSearch('/')<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch('?')<CR>?<C-R>=@/<CR><CR>
"""""""""""""""""""""""""""visual-star-search"""""""""""""""""""""""""""
"""""""""""""""""""""""""""rainbow"""""""""""""""""""""""""""
let g:rainbow_active = 1
"""""""""""""""""""""""""""rainbow"""""""""""""""""""""""""""
"""""""""""""""""""""""""""vim-javascript"""""""""""""""""""""""""""
let g:javascript_enable_domhtmlcss = 1
"""""""""""""""""""""""""""vim-javascript"""""""""""""""""""""""""""
"""""""""""""""""""""""""""HTML"""""""""""""""""""""""""""
let g:html_indent_inctags = "body,head,tbody"	" 缩进body head
let g:html_indent_script1 = "inc"	" 缩进<script>标签
let g:html_indent_style1 = "inc"	" 缩进<style>标签
runtime macros/matchit.vim   "支持使用 % 在 XML 标签间跳转
"""""""""""""""""""""""""""HTML"""""""""""""""""""""""""""
"""""""""""""""""""""""""""YouCompleteMe"""""""""""""""""""""""""""
let g:ycm_global_ycm_extra_conf = 'E:\DeveloperTools\vim\.ycm_extra_conf.py'
let g:ycm_key_invoke_completion = '<A-/>'
"let g:ycm_python_binary_path = 'E:/DeveloperTools/Python35/python.exe'
let g:ycm_min_num_of_chars_for_completion = 1
let g:ycm_complete_in_comments = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_always_populate_location_list = 1
let g:ycm_confirm_extra_conf = 0
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_semantic_triggers = {
    \ 'python' : ['import ', 'from '],
    \ 'd' : ['import '],
    \ 'php' : ['$']
    \ }
let g:ycm_filetype_blacklist = {
      \ 'tagbar' : 1,
      \ 'qf' : 1,
      \ 'notes' : 1,
      \ 'unite' : 1,
      \ 'vimwiki' : 1,
      \ 'pandoc' : 1,
      \ 'infolog' : 1,
      \ 'mail' : 1
      \}
"""""""""""""""""""""""""""YouCompleteMe"""""""""""""""""""""""""""
"""""""""""""""""""""""""""markdown"""""""""""""""""""""""""""
let g:mkdp_path_to_chrome = 'C:/Program Files/Mozilla Firefox/firefox.exe'
"""""""""""""""""""""""""""markdown"""""""""""""""""""""""""""
"""""""""""""""""""""""""""delimitMate"""""""""""""""""""""""""""
let delimitMate_balance_matchpairs = 1
let delimitMate_expand_space = 1
let delimitMate_expand_cr = 1
"""""""""""""""""""""""""""delimitMate"""""""""""""""""""""""""""
"""""""""""""""""""""""""""Grep"""""""""""""""""""""""""""
set grepprg=pt
let g:EasyGrepCommand=1
"""""""""""""""""""""""""""Grep"""""""""""""""""""""""""""
